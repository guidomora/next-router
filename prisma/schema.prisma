generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id          String   @id @default(uuid())
  description String
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id]) // relaciones 
  userId      String
}

// Nex auth

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  todos         Todo[] // el usuario puede tener muchos todos

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// si hay una tabla creada en prisma, para que se cree el schema solo se debe correr el comando 'npx prisma db push'
// luego el comando 'npx prisma generate' para que se cree el cliente de prisma
// si hacemos algun cambio y queremos que se refleje en la db debemos correr el comando 'npx prisma push' 
// ya que si hacemos el migrate, va a borrar la tabla y la va a volver a crear, entonces se perderian los datos
// model Employee {
//   id        Int      @id @default(autoincrement())
//   name      String   @db.VarChar
//   isAdmin   Boolean  @default(true)
//   createdAt DateTime @default(now()) @db.Timestamp(6)
// }
